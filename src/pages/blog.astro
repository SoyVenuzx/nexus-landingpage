---
import { getCollection } from 'astro:content';
import { Picture } from 'astro:assets';
import Layout from '@/layouts/Layout.astro';
import Container from '@/components/container.astro';
import Sectionhead from '@/components/sectionhead.astro';

export interface AccordionItem {
  id: number;
  title: string;
}

interface Props {
  items: AccordionItem[];
}

// Filter blog entries with 'draft: false' & date before current date
const publishedBlogEntries = await getCollection(
  'blog',
  ({ data }) => !data.draft
);

function getPostsByCategory(category: string) {
  return publishedBlogEntries.filter(
    (post) => post.data.category.toLowerCase() === category
  );
}

// Sort content entries by publication date
// publishedBlogEntries.sort(function (a, b) {
//   return b.data.publishDate.valueOf() - a.data.publishDate.valueOf();
// });

const items = [
  {
    id: 1,
    title: 'Portadas',
  },
  {
    id: 2,
    title: 'Logos',
  },
];
---

<Layout title='Blog'>
  <Container>
    <Sectionhead>
      <Fragment slot='title'>Portafolio</Fragment>
      <Fragment slot='desc'>
        A continuación, una lista de nuestros proyectos más recientes divididos
        en categorías.
      </Fragment>
    </Sectionhead>
    <main class='mt-16'>
      <ul class='grid gap-16 max-w-4xl mx-auto'>
        <div class='space-y-2'>
          {
            items.map((item) => {
              const data = getPostsByCategory(item.title.toLowerCase());

              return (
                <div class='border-b border-slate-200'>
                  <button
                    id={`button-${item.id}`}
                    class='w-full flex justify-between items-center py-5 text-slate-800 cursor-pointer'
                    data-id={item.id}>
                    <span class='text-xl font-bold'>{item.title}</span>
                    <span
                      id={`icon-${item.id}`}
                      class='text-slate-800 transition-transform duration-300'>
                      <svg
                        xmlns='http://www.w3.org/2000/svg'
                        viewBox='0 0 16 16'
                        fill='currentColor'
                        class='w-4 h-4'>
                        <path d='M8.75 3.75a.75.75 0 0 0-1.5 0v3.5h-3.5a.75.75 0 0 0 0 1.5h3.5v3.5a.75.75 0 0 0 1.5 0v-3.5h3.5a.75.75 0 0 0 0-1.5h-3.5v-3.5Z' />
                      </svg>
                    </span>
                  </button>
                  <div
                    id={`content-${item.id}`}
                    class='max-h-0 overflow-hidden transition-all duration-300 ease-in-out'>
                    <div class='pb-5 text-sm text-slate-500 flex flex-col gap-5'>
                      {data.map((blogPostEntry, index) => (
                        <li>
                          <a
                            href={`/blog/${blogPostEntry.slug.split('med/')[1]}`}>
                            <div class='grid md:grid-cols-[auto_1fr] gap-5 md:gap-10 items-center'>
                              <Picture
                                src={blogPostEntry.data.image.src}
                                alt={blogPostEntry.data.image.alt}
                                sizes='(max-width: 800px) 100vw, 800px'
                                width={800}
                                height={600}
                                loading={index <= 2 ? 'eager' : 'lazy'}
                                decoding={index <= 2 ? 'sync' : 'async'}
                                class='w-80 rounded-md object-cover object-center bg-white'
                              />
                              <div>
                                <span class='text-gray-400 uppercase tracking-wider text-sm font-medium'>
                                  {blogPostEntry.data.category}
                                </span>

                                <h2
                                  transition:name={`title-${blogPostEntry.id}`}
                                  class='text-3xl text-black/80 font-semibold leading-snug tracking-tight mt-1 '>
                                  {blogPostEntry.data.title}
                                </h2>

                                <div class='flex gap-2 mt-3'>
                                  <span class='text-gray-400'>
                                    {blogPostEntry.data.author}
                                  </span>
                                  {/* <span class='text-gray-400'>• </span> */}
                                  {/* <time
                                  class='text-gray-400'
                                  datetime={blogPostEntry.data.publishDate.toISOString()}>
                                  {blogPostEntry.data.publishDate.toDateString()}
                                </time> */}
                                </div>
                              </div>
                            </div>
                          </a>
                        </li>
                      ))}
                    </div>
                  </div>
                </div>
              );
            })
          }
        </div>
      </ul>
    </main>
  </Container>
</Layout>

<script>
  document.addEventListener('astro:page-load', () => {
    const accordions = document.querySelectorAll('[data-id]');

    // Función para abrir un acordeón
    const openAccordion = (index) => {
      const content = document.getElementById(`content-${index}`);
      const icon = document.getElementById(`icon-${index}`);

      const minusSVG = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor" class="w-4 h-4">
                          <path d="M3.75 7.25a.75.75 0 0 0 0 1.5h8.5a.75.75 0 0 0 0-1.5h-8.5Z" />
                        </svg>`;

      if (content && icon) {
        content.style.maxHeight = `${content.scrollHeight}px`;
        icon.innerHTML = minusSVG;
      }
    };

    // Función para cerrar un acordeón
    const closeAccordion = (index) => {
      const content = document.getElementById(`content-${index}`);
      const icon = document.getElementById(`icon-${index}`);

      const plusSVG = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor" class="w-4 h-4">
                         <path d="M8.75 3.75a.75.75 0 0 0-1.5 0v3.5h-3.5a.75.75 0 0 0 0 1.5h3.5v3.5a.75.75 0 0 0 1.5 0v-3.5h3.5a.75.75 0 0 0 0-1.5h-3.5v-3.5Z" />
                       </svg>`;

      if (content && icon) {
        content.style.maxHeight = '0';
        icon.innerHTML = plusSVG;
      }
    };

    // Al cargar la página, abre todos los acordeones
    accordions.forEach((accordion) => {
      const index = accordion.getAttribute('data-id');
      openAccordion(index);
    });

    // Añade el evento de clic para alternar
    accordions.forEach((accordion) => {
      accordion.addEventListener('click', () => {
        const index = accordion.getAttribute('data-id');
        const content = document.getElementById(`content-${index}`);

        if (content) {
          if (content.style.maxHeight && content.style.maxHeight !== '0px') {
            closeAccordion(index);
          } else {
            openAccordion(index);
          }
        }
      });
    });
  });
</script>
